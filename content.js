// Shopping Music Player - Content Script
// Toca m√∫sica quando o usu√°rio entra em sites de compras

class ShoppingMusicPlayer {
    constructor() {
        this.audioElement = null;
        this.isPlaying = false;
        this.intentionalPause = false;
        this.musicUrl = 'https://www.youtube.com/watch?v=3_soYT__b9U&list=PL49AC5D420FA55436&index=8';
        this.currentDomain = window.location.hostname;
        this.controlsAdded = false;
        this.instanceId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);
        this.globalKey = 'shopping_music_global_state';
        this.isInitialized = false;
        
        // Configura√ß√£o de m√∫ltiplas m√∫sicas
        this.musicTracks = [
            {
                id: 'shop-1',
                name: 'Shopping Music 1',
                file: 'audio/shop-1.mp3'
            },
            {
                id: 'shop-2', 
                name: 'Shopping Music 2',
                file: 'audio/shop-2.mp3'
            }
        ];
        this.currentTrackIndex = 0;
        this.randomMode = false;
        
        // üîÑ Sistema de Continuidade Musical
        this.continuityKey = 'shopping_music_continuity';
        this.lastSaveTime = 0;
        this.autoSaveInterval = null;
        this.maxContinuityTime = 30 * 60 * 1000; // 30 minutos
        
        console.log(`üéµ Criando inst√¢ncia [${this.instanceId}] no dom√≠nio: ${this.currentDomain}`);
        this.init();
    }

    async init() {
        if (this.isInitialized) {
            console.log(`‚ö†Ô∏è Inst√¢ncia j√° inicializada [${this.instanceId}]`);
            return;
        }

        console.log(`üéµ Inicializando Shopping Music Player [${this.instanceId}]...`);
        
        // Verifica se j√° existe uma inst√¢ncia ativa
        const existingState = await this.getGlobalState();
        const now = Date.now();
        
        // Se existe uma inst√¢ncia ativa nos √∫ltimos 10 segundos, tenta assumir controle
        if (existingState && existingState.isActive && (now - existingState.timestamp) < 10000) {
            console.log(`üéµ Inst√¢ncia ativa encontrada [${existingState.instanceId}], aguardando ou assumindo controle [${this.instanceId}]`);
            
            // Aguarda 3 segundos e verifica novamente
            setTimeout(async () => {
                const recentState = await this.getGlobalState();
                const timeNow = Date.now();
                
                // Se a outra inst√¢ncia n√£o atualizou timestamp, assume controle
                if (!recentState || !recentState.isActive || (timeNow - recentState.timestamp) > 8000) {
                    console.log(`üîÑ Assumindo controle de inst√¢ncia inativa [${this.instanceId}]`);
                    await this.forceInit();
                } else {
                    console.log(`‚è∏Ô∏è Outra inst√¢ncia ainda ativa, mantendo standby [${this.instanceId}]`);
                    // Mant√©m em standby para assumir controle se necess√°rio
                    this.setupStandbyMode();
                }
            }, 3000);
            return;
        }

        // Se n√£o h√° inst√¢ncia ativa ou √© muito antiga, inicializa normalmente
        await this.forceInit();
    }

    async forceInit() {
        console.log(`üí™ For√ßando inicializa√ß√£o [${this.instanceId}]`);
        
        // Registra esta inst√¢ncia como ativa
        await this.setGlobalState({
            isActive: true,
            instanceId: this.instanceId,
            domain: this.currentDomain,
            isPlaying: false,
            timestamp: Date.now(),
            tabId: await this.getCurrentTabId()
        });

        this.isInitialized = true;
        
        // ‚ö° EXECU√á√ÉO IMEDIATA - N√£o espera DOM pois s√≥ precisa da URL
        console.log(`üöÄ Iniciando m√∫sica imediatamente [${this.instanceId}]...`);
        this.checkAndStart();

        // Escuta mensagens do background script
        this.setupMessageListener();
        
        // Monitora outras inst√¢ncias
        this.startInstanceMonitoring();
    }

    setupStandbyMode() {
        console.log(`‚è∏Ô∏è Modo standby ativado [${this.instanceId}]`);
        
        // Verifica a cada 5 segundos se pode assumir controle
        this.standbyInterval = setInterval(async () => {
            const currentState = await this.getGlobalState();
            const now = Date.now();
            
            if (!currentState || !currentState.isActive || (now - currentState.timestamp) > 8000) {
                console.log(`üîÑ Saindo do standby e assumindo controle [${this.instanceId}]`);
                clearInterval(this.standbyInterval);
                await this.forceInit();
            }
        }, 5000);
    }

    async getCurrentTabId() {
        try {
            // Content scripts n√£o podem usar chrome.tabs diretamente
            // Solicita ao background script
            const response = await chrome.runtime.sendMessage({ action: 'getCurrentTab' });
            return response?.tabId || null;
        } catch (error) {
            console.log('Erro ao obter tab ID:', error);
            return null;
        }
    }

    async getGlobalState() {
        return new Promise((resolve) => {
            chrome.storage.local.get([this.globalKey], (result) => {
                resolve(result[this.globalKey] || null);
            });
        });
    }

    async setGlobalState(state) {
        return new Promise((resolve) => {
            chrome.storage.local.set({ [this.globalKey]: state }, resolve);
        });
    }

    async clearGlobalState() {
        return new Promise((resolve) => {
            chrome.storage.local.remove([this.globalKey], resolve);
        });
    }

    // ‚ö° OTIMIZA√á√ÉO: Aguarda DOM de forma n√£o-bloqueante
    async ensureDOMReady() {
        return new Promise((resolve) => {
            if (document.documentElement) {
                // DOM j√° est√° dispon√≠vel
                resolve();
            } else {
                // Aguarda DOM ficar dispon√≠vel
                const checkDOM = () => {
                    if (document.documentElement) {
                        resolve();
                    } else {
                        setTimeout(checkDOM, 10); // Verifica a cada 10ms
                    }
                };
                checkDOM();
            }
        });
    }

    // ========== SISTEMA DE CONTINUIDADE MUSICAL ==========
    
    async saveMusicContinuity() {
        if (!this.audioElement || !this.isPlaying) {
            return;
        }

        const continuityData = {
            trackIndex: this.currentTrackIndex,
            currentTime: this.audioElement.currentTime,
            volume: this.audioElement.volume,
            randomMode: this.randomMode,
            isPlaying: this.isPlaying,
            domain: this.currentDomain,
            url: window.location.href,
            timestamp: Date.now(),
            instanceId: this.instanceId,
            sessionId: `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
        };

        await chrome.storage.local.set({ [this.continuityKey]: continuityData });
        this.lastSaveTime = Date.now();
        
        console.log(`üíæ Continuidade salva: ${this.musicTracks[this.currentTrackIndex].name} em ${Math.floor(continuityData.currentTime)}s`);
    }

    async loadMusicContinuity() {
        try {
            const result = await chrome.storage.local.get([this.continuityKey]);
            const continuityData = result[this.continuityKey];

            if (!continuityData) {
                console.log(`üìÇ Nenhum estado de continuidade encontrado`);
                return null;
            }

            const age = Date.now() - continuityData.timestamp;
            
            // Ignora estados muito antigos (mais de 30 minutos)
            if (age > this.maxContinuityTime) {
                console.log(`‚è∞ Estado de continuidade muito antigo (${Math.floor(age / 60000)} min), ignorando`);
                await this.clearMusicContinuity();
                return null;
            }

            // Verifica se √© do mesmo dom√≠nio ou dom√≠nio relacionado
            const currentDomain = window.location.hostname;
            const savedDomain = continuityData.domain;
            
            if (!this.isRelatedDomain(currentDomain, savedDomain)) {
                console.log(`üåê Dom√≠nio diferente: ${currentDomain} vs ${savedDomain}, ignorando continuidade`);
                return null;
            }

            console.log(`üîÑ Estado de continuidade carregado: ${this.musicTracks[continuityData.trackIndex]?.name || 'm√∫sica'} em ${Math.floor(continuityData.currentTime)}s`);
            return continuityData;

        } catch (error) {
            console.error('Erro ao carregar continuidade:', error);
            return null;
        }
    }

    isRelatedDomain(currentDomain, savedDomain) {
        // Considera dom√≠nios relacionados (ex: amazon.com e amazon.com.br)
        const extractBaseDomain = (domain) => {
            return domain.replace(/^www\./, '').split('.').slice(-2).join('.');
        };

        const currentBase = extractBaseDomain(currentDomain);
        const savedBase = extractBaseDomain(savedDomain);

        // Mesmo dom√≠nio base ou ambos s√£o sites de compras
        return currentBase === savedBase || 
               (this.isShoppingSite(currentDomain) && this.isShoppingSite(savedDomain));
    }

    isShoppingSite(domain) {
        const shoppingSites = [
            'mercadolivre.com', 'mercadolibre.com', 'amazon.com', 'ebay.com',
            'aliexpress.com', 'shopee.com', 'americanas.com', 'submarino.com',
            'casasbahia.com', 'magazineluiza.com'
        ];
        
        return shoppingSites.some(site => domain.includes(site));
    }

    async clearMusicContinuity() {
        await chrome.storage.local.remove([this.continuityKey]);
        console.log(`üóëÔ∏è Estado de continuidade limpo`);
    }

    async restoreFromContinuity(continuityData) {
        try {
            console.log(`üîÑ Restaurando m√∫sica: ${this.musicTracks[continuityData.trackIndex]?.name} em ${Math.floor(continuityData.currentTime)}s`);

            // Configura estado da inst√¢ncia
            this.currentTrackIndex = continuityData.trackIndex;
            this.randomMode = continuityData.randomMode;

            // Salva configura√ß√µes atualizadas
            await this.saveMusicSettings();

            // Cria √°udio com estado restaurado
            await this.createAudioPlayer({
                currentTime: continuityData.currentTime,
                volume: continuityData.volume
            });

            // ‚ö° Adiciona controles em paralelo - n√£o bloqueia m√∫sica
            this.addMusicControls();

            // Atualiza estado global
            const globalState = await this.getGlobalState();
            await this.setGlobalState({
                ...globalState,
                isPlaying: true,
                hasAudio: true,
                trackIndex: this.currentTrackIndex,
                randomMode: this.randomMode
            });

            // Inicia auto-save
            this.startAutoSaveContinuity();

            // Notifica background
            await this.sendToBackground({
                action: 'musicRestored',
                domain: this.currentDomain,
                currentTime: continuityData.currentTime,
                volume: continuityData.volume,
                trackIndex: this.currentTrackIndex
            });

            console.log(`‚úÖ Continuidade restaurada com sucesso [${this.instanceId}]!`);

        } catch (error) {
            console.error('Erro ao restaurar continuidade:', error);
            // Fallback: inicia m√∫sica normal
            await this.startNewMusic();
        }
    }

    startAutoSaveContinuity() {
        // Auto-salva a cada 5 segundos quando tocando
        this.autoSaveInterval = setInterval(async () => {
            if (this.isPlaying && this.audioElement && !this.audioElement.paused) {
                await this.saveMusicContinuity();
            }
        }, 5000);

        console.log(`‚è∞ Auto-save de continuidade iniciado (5s)`);
    }

    stopAutoSaveContinuity() {
        if (this.autoSaveInterval) {
            clearInterval(this.autoSaveInterval);
            this.autoSaveInterval = null;
            console.log(`‚è∞ Auto-save de continuidade parado`);
        }
    }

    startInstanceMonitoring() {
        // Monitora a cada 3 segundos se ainda √© a inst√¢ncia ativa
        this.monitorInterval = setInterval(async () => {
            if (!this.isInitialized) return;
            
            const globalState = await this.getGlobalState();
            
            if (!globalState || globalState.instanceId !== this.instanceId) {
                console.log(`üõë Perdeu controle para outra inst√¢ncia, desativando [${this.instanceId}]`);
                this.deactivate();
            } else {
                // Atualiza timestamp para manter viva
                await this.setGlobalState({
                    ...globalState,
                    timestamp: Date.now()
                });
            }
        }, 3000);
    }

    deactivate() {
        console.log(`üîá Desativando inst√¢ncia [${this.instanceId}]`);
        
        if (this.monitorInterval) {
            clearInterval(this.monitorInterval);
            this.monitorInterval = null;
        }
        
        if (this.standbyInterval) {
            clearInterval(this.standbyInterval);
            this.standbyInterval = null;
        }
        
        // Remove controles se existirem
        const controls = document.getElementById('shopping-music-controls');
        if (controls) {
            controls.remove();
            this.controlsAdded = false;
        }
        
        // Remove √°udio √≥rf√£o se n√£o est√° sendo usado
        if (this.audioElement && this.audioElement.paused) {
            this.removeAudioElement();
        }
        
        this.isInitialized = false;
    }

    removeAudioElement() {
        if (this.audioElement) {
            console.log(`üßπ Removendo elemento de √°udio [${this.instanceId}]`);
            
            // Marca como pausa intencional para evitar auto-retomar
            this.intentionalPause = true;
            
            this.audioElement.pause();
            this.audioElement.src = '';
            
            // Remove listeners para evitar vazamentos de mem√≥ria
            if (this.timeUpdateHandler) {
                this.audioElement.removeEventListener('timeupdate', this.timeUpdateHandler);
            }
            
            if (this.audioElement.parentNode) {
                this.audioElement.remove();
            }
            
            this.audioElement = null;
            this.isPlaying = false;
        }
    }

    async checkAndStart() {
        try {
            console.log(`üîç Verificando configura√ß√µes [${this.instanceId}]...`);
            
            // Verifica se ainda √© a inst√¢ncia ativa
            const globalState = await this.getGlobalState();
            if (!globalState || globalState.instanceId !== this.instanceId) {
                console.log(`‚ùå N√£o √© mais a inst√¢ncia ativa [${this.instanceId}], abortando`);
                return;
            }
            
            // Verifica se a extens√£o est√° ativada
            const isEnabled = await this.getStoredSetting('musicEnabled', true);
            console.log('‚öôÔ∏è M√∫sica ativada:', isEnabled);
            
            if (!isEnabled) {
                console.log('‚ùå M√∫sica desabilitada nas configura√ß√µes');
                await this.clearGlobalState();
                return;
            }

            // üîÑ VERIFICA CONTINUIDADE MUSICAL PRIMEIRO
            const continuityData = await this.loadMusicContinuity();
            if (continuityData && continuityData.isPlaying) {
                console.log(`üîÑ Restaurando continuidade musical...`);
                await this.restoreFromContinuity(continuityData);
                return;
            }

            // Procura por √°udio existente global
            const existingAudio = this.findExistingAudio();
            if (existingAudio) {
                console.log(`üéµ Reutilizando √°udio existente [${this.instanceId}]`);
                this.audioElement = existingAudio;
                this.isPlaying = !existingAudio.paused;
                
                if (this.isPlaying) {
                    this.setupTimeUpdateListener();
                }
                
                // ‚ö° Controles em paralelo - n√£o bloqueia m√∫sica
                this.addMusicControls();
                
                // Atualiza estado global
                await this.setGlobalState({
                    ...globalState,
                    isPlaying: this.isPlaying,
                    hasAudio: true
                });
                return;
            }

            // Inicia nova m√∫sica
            console.log(`üÜï Iniciando nova m√∫sica [${this.instanceId}]...`);
            await this.startNewMusic();
            
        } catch (error) {
            console.error(`‚ùå Erro ao verificar e iniciar m√∫sica [${this.instanceId}]:`, error);
        }
    }

    findExistingAudio() {
        // Procura por √°udio existente do shopping music player
        const audios = document.querySelectorAll('audio[data-shopping-music="true"]');
        for (let audio of audios) {
            if (audio.src && !audio.ended) {
                return audio;
            }
        }
        return null;
    }

    // ========== GERENCIAMENTO DE M√öLTIPLAS M√öSICAS ==========
    
    async loadMusicSettings() {
        const settings = await this.getStoredSetting('musicSettings', {
            selectedTrack: 0,
            randomMode: false
        });
        
        this.currentTrackIndex = settings.selectedTrack;
        this.randomMode = settings.randomMode;
        
        console.log(`üéµ Configura√ß√µes carregadas: Track ${this.currentTrackIndex}, Random: ${this.randomMode}`);
    }
    
    getCurrentTrack() {
        if (this.randomMode) {
            // Seleciona uma m√∫sica aleat√≥ria diferente da atual
            let randomIndex;
            do {
                randomIndex = Math.floor(Math.random() * this.musicTracks.length);
            } while (randomIndex === this.currentTrackIndex && this.musicTracks.length > 1);
            
            this.currentTrackIndex = randomIndex;
            this.saveMusicSettings();
        }
        
        return this.musicTracks[this.currentTrackIndex] || this.musicTracks[0];
    }
    
    async saveMusicSettings() {
        await this.setStoredSetting('musicSettings', {
            selectedTrack: this.currentTrackIndex,
            randomMode: this.randomMode
        });
    }
    
    async changeTrack(trackIndex) {
        console.log(`üéµ Mudando para track: ${trackIndex}`);
        
        if (trackIndex >= 0 && trackIndex < this.musicTracks.length) {
            this.currentTrackIndex = trackIndex;
            await this.saveMusicSettings();
            
            // Se estiver tocando, troca a m√∫sica
            if (this.isPlaying && this.audioElement) {
                const wasPlaying = !this.audioElement.paused;
                const currentTime = this.audioElement.currentTime;
                const currentVolume = this.audioElement.volume;
                
                // Remove √°udio atual
                this.removeAudioElement();
                
                // Cria novo √°udio
                await this.createAudioPlayer({ 
                    currentTime: 0, // Come√ßa do in√≠cio na nova m√∫sica
                    volume: currentVolume 
                });
                
                if (wasPlaying) {
                    await this.tryAutoplay();
                }
                
                // Atualiza controles
                this.updateMusicControls();
            }
        }
    }
    
    async toggleRandomMode() {
        this.randomMode = !this.randomMode;
        await this.saveMusicSettings();
        
        console.log(`üîÄ Modo aleat√≥rio: ${this.randomMode ? 'ATIVADO' : 'DESATIVADO'}`);
        
        // Atualiza controles se existirem
        this.updateMusicControls();
    }
    
    nextTrack() {
        if (this.randomMode) {
            // No modo aleat√≥rio, getCurrentTrack() j√° seleciona aleatoriamente
            this.getCurrentTrack();
        } else {
            // Modo sequencial
            this.currentTrackIndex = (this.currentTrackIndex + 1) % this.musicTracks.length;
        }
        
        this.changeTrack(this.currentTrackIndex);
    }
    
    previousTrack() {
        if (!this.randomMode) {
            this.currentTrackIndex = (this.currentTrackIndex - 1 + this.musicTracks.length) % this.musicTracks.length;
            this.changeTrack(this.currentTrackIndex);
        } else {
            // No modo aleat√≥rio, "anterior" √© uma m√∫sica aleat√≥ria
            this.nextTrack();
        }
    }

    setupMessageListener() {
        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
            switch (request.action) {
                case 'restoreMusic':
                    this.restoreMusic(request.musicState);
                    break;
                case 'startNewMusic':
                    this.startNewMusic();
                    break;
                case 'stopMusic':
                    this.stopMusic();
                    break;
                case 'toggleMusic':
                    if (request.enabled && !this.isPlaying) {
                        this.startNewMusic();
                    } else if (!request.enabled && this.isPlaying) {
                        this.toggleMusic();
                    }
                    break;
                case 'updateVolume':
                    if (this.audioElement) {
                        this.audioElement.volume = request.volume;
                        this.notifyBackgroundStateChange({ volume: request.volume });
                    }
                    break;
                case 'changeTrack':
                    this.changeTrack(request.trackIndex);
                    break;
                case 'toggleRandom':
                    this.toggleRandomMode();
                    break;
                case 'nextTrack':
                    this.nextTrack();
                    break;
                case 'previousTrack':
                    this.previousTrack();
                    break;
                case 'getMusicInfo':
                    sendResponse({
                        status: 'ok',
                        tracks: this.musicTracks,
                        currentTrack: this.currentTrackIndex,
                        randomMode: this.randomMode,
                        isPlaying: this.isPlaying
                    });
                    return true; // Indica resposta ass√≠ncrona
                case 'testMusic':
                    this.showMusicInfo();
                    break;
            }
            sendResponse({ status: 'ok' });
        });
    }

    async sendToBackground(message) {
        return new Promise((resolve) => {
            chrome.runtime.sendMessage(message, (response) => {
                resolve(response || {});
            });
        });
    }

    async notifyBackgroundStateChange(stateChanges) {
        await this.sendToBackground({
            action: 'updateMusicState',
            state: stateChanges
        });
    }

    async startNewMusic() {
        try {
            console.log(`üéµ Iniciando nova m√∫sica [${this.instanceId}]...`);
            
            // Remove qualquer √°udio √≥rf√£o primeiro
            this.cleanupOrphanAudios();
            
            // Cria elemento de √°udio para tocar a m√∫sica
            await this.createAudioPlayer();
            
            // ‚ö° Adiciona controles visuais em paralelo - n√£o bloqueia m√∫sica
            this.addMusicControls();

            // Atualiza estado global
            const globalState = await this.getGlobalState();
            await this.setGlobalState({
                ...globalState,
                hasAudio: true,
                isPlaying: this.isPlaying
            });

            // Notifica o background script
            await this.sendToBackground({
                action: 'musicStarted',
                domain: this.currentDomain,
                currentTime: 0,
                volume: this.audioElement.volume
            });

            console.log(`üéµ Shopping Music Player ativado [${this.instanceId}]!`);
        } catch (error) {
            console.error(`Erro ao iniciar m√∫sica [${this.instanceId}]:`, error);
        }
    }

    cleanupOrphanAudios() {
        // Remove todos os √°udios √≥rf√£os de inst√¢ncias anteriores
        const orphanAudios = document.querySelectorAll('audio[data-shopping-music="true"]');
        orphanAudios.forEach(audio => {
            console.log(`üßπ Removendo √°udio √≥rf√£o`);
            audio.pause();
            audio.src = '';
            if (audio.parentNode) {
                audio.remove();
            }
        });
    }

    async createAudioPlayer(restoreState = null) {
        // Carrega configura√ß√µes de m√∫sica
        await this.loadMusicSettings();
        
        // Seleciona a m√∫sica atual
        const currentTrack = this.getCurrentTrack();
        const audioUrl = chrome.runtime.getURL(currentTrack.file);
        console.log(`üéµ Criando novo √°udio [${this.instanceId}]: ${currentTrack.name} (${audioUrl})`);
        
        this.audioElement = new Audio(audioUrl);
        
        // Marca este √°udio como sendo do shopping music player
        this.audioElement.setAttribute('data-shopping-music', 'true');
        this.audioElement.setAttribute('data-instance-id', this.instanceId);
        this.audioElement.setAttribute('data-timestamp', Date.now());
        
        // ‚ö° OTIMIZA√á√ÉO: Configura √°udio antes de anexar ao DOM
        this.audioElement.style.display = 'none';
        this.audioElement.style.position = 'fixed';
        this.audioElement.style.top = '-9999px';
        
        // Previne remo√ß√£o acidental do √°udio
        this.audioElement.addEventListener('remove', (e) => {
            e.preventDefault();
            console.log(`üõ°Ô∏è Tentativa de remo√ß√£o do √°udio bloqueada [${this.instanceId}]`);
        });
        
        // ‚ö° COME√áA CARREGAMENTO ANTES DO DOM (OTIMIZA√á√ÉO CR√çTICA)
        console.log(`‚ö° Iniciando pr√©-carregamento do √°udio [${this.instanceId}]...`);
        const audioLoadPromise = new Promise((resolve, reject) => {
            this.audioElement.addEventListener('canplaythrough', () => {
                console.log(`‚úÖ √Åudio pr√©-carregado [${this.instanceId}]`);
                resolve();
            });
            
            this.audioElement.addEventListener('error', (e) => {
                console.error(`‚ùå Erro ao carregar √°udio [${this.instanceId}]:`, e);
                reject(new Error('Falha ao carregar arquivo de √°udio'));
            });
            
            // Timeout de 10 segundos
            setTimeout(() => {
                reject(new Error('Timeout ao carregar √°udio'));
            }, 10000);
        });
        
        // ‚ö° INICIA CARREGAMENTO IMEDIATAMENTE (SEM ESPERAR DOM)
        console.log(`üöÄ Carregando √°udio sem esperar DOM [${this.instanceId}]...`);
        this.audioElement.preload = 'auto';
        this.audioElement.load();
        
        // ‚ö° TENTA TOCAR IMEDIATAMENTE ASSIM QUE CARREGAR
        audioLoadPromise.then(async () => {
            console.log(`üéµ Tentando autoplay imediato [${this.instanceId}]`);
            await this.tryAutoplay();
        }).catch(error => {
            console.error(`‚ùå Erro no autoplay imediato [${this.instanceId}]:`, error);
        });
        
        // Aguarda DOM apenas para anexar elemento (em paralelo)
        const domReadyPromise = this.ensureDOMReady().then(() => {
            console.log(`üìã DOM pronto, anexando √°udio [${this.instanceId}]`);
            document.documentElement.appendChild(this.audioElement);
        });
        
        // Aguarda carregamento completar (pode ser antes ou depois do DOM)
        await audioLoadPromise;
        
        // Configura√ß√µes do √°udio
        this.audioElement.loop = true;
        this.audioElement.volume = restoreState ? restoreState.volume : 0.3;
        
        // Restaura posi√ß√£o se fornecida
        if (restoreState && restoreState.currentTime) {
            this.audioElement.currentTime = restoreState.currentTime;
        }
        
        // Adiciona prote√ß√£o contra pausa em navega√ß√£o
        this.setupNavigationProtection();
        
        // ‚ö° AUTOPLAY J√Å FOI TENTADO NO CARREGAMENTO - apenas finaliza√ß√µes aqui
        if (!this.isPlaying) {
            console.log(`üîÑ Backup autoplay [${this.instanceId}]`);
            await this.tryAutoplay();
        } else {
            console.log(`‚úÖ Autoplay j√° funcionou durante carregamento [${this.instanceId}]`);
        }
    }

    async tryAutoplay() {
        if (this.isPlaying) {
            console.log(`‚ö†Ô∏è √Åudio j√° est√° tocando [${this.instanceId}]`);
            return;
        }
        
        console.log(`üéµ Tentando autoplay [${this.instanceId}]`);
        
        try {
            await this.audioElement.play();
            this.isPlaying = true;
            this.setupTimeUpdateListener();
            
            // üîÑ Inicia auto-save de continuidade
            this.startAutoSaveContinuity();
            
            // Atualiza estado global
            const globalState = await this.getGlobalState();
            await this.setGlobalState({
                ...globalState,
                isPlaying: true,
                hasAudio: true
            });
            
            console.log(`‚úÖ Autoplay bem-sucedido [${this.instanceId}]!`);
            
        } catch (error) {
            console.log(`‚ùå Autoplay falhou [${this.instanceId}]:`, error.message);
            await this.handleAutoplayFailure();
        }
    }

    async handleAutoplayFailure() {
        // Verifica se o usu√°rio quer notifica√ß√µes
        const showNotifications = await this.getStoredSetting('showPlayNotifications', true);
        
        if (showNotifications) {
            console.log(`üì¢ Mostrando notifica√ß√£o [${this.instanceId}]`);
            this.showDiscretePlayNotification();
        } else {
            console.log(`üîá Notifica√ß√µes desabilitadas [${this.instanceId}]`);
        }
    }

    setupNavigationProtection() {
        if (!this.audioElement) return;

        console.log(`üõ°Ô∏è Configurando prote√ß√£o de navega√ß√£o gen√©rica [${this.instanceId}]`);
        
        // Intercepta cliques em links para preservar m√∫sica
        document.addEventListener('click', (e) => {
            const link = e.target.closest('a');
            if (link && link.href && this.isPlaying) {
                console.log(`üîó Link clicado, preservando m√∫sica: ${link.href}`);
                
                // üîÑ Salva continuidade musical
                this.saveMusicContinuity();
                
                // Salva estado atual no storage para preservar entre navega√ß√µes
                this.saveNavigationState();
            }
        }, true);
        
        // üîÑ DETEC√á√ÉO GEN√âRICA DE MUDAN√áA DE URL (SPA Universal)
        this.setupGenericSPADetection();
        
        // Intercepta evento popstate (bot√£o voltar/avan√ßar)
        window.addEventListener('popstate', () => {
            console.log(`‚¨ÖÔ∏è Navega√ß√£o via hist√≥rico detectada`);
            setTimeout(() => {
                this.handleSPANavigation();
            }, 300);
        });
        
        // Intercepta pushState e replaceState
        this.interceptHistoryAPI();
        
        // Monitora foco da janela para reativar m√∫sica
        this.setupFocusMonitoring();
    }

    setupGenericSPADetection() {
        console.log(`üåê Configurando detec√ß√£o gen√©rica de SPA [${this.instanceId}]`);
        
        let lastUrl = location.href;
        
        // Monitor simples de mudan√ßa de URL - funciona para qualquer SPA
        const urlPolling = setInterval(() => {
            if (location.href !== lastUrl && this.isPlaying) {
                const oldUrl = lastUrl;
                lastUrl = location.href;
                
                console.log(`üîÑ Navega√ß√£o SPA detectada: ${oldUrl} ‚Üí ${location.href}`);
                this.handleSPANavigation();
            }
        }, 1000); // Verifica a cada segundo
        
        // Cleanup quando inst√¢ncia √© destru√≠da
        this.navigationCleanup = () => {
            clearInterval(urlPolling);
        };
    }

    handleSPANavigation() {
        console.log(`üîÑ Processando navega√ß√£o SPA`);
        
        // Verifica se ainda est√° em site de compras
        if (!isShoppingSite()) {
            console.log(`üè™ Saiu do site de compras, pausando m√∫sica`);
            this.intentionalPause = true;
            if (this.audioElement) {
                this.audioElement.pause();
            }
            return;
        }

        // Salva estado atual
        this.saveMusicContinuity();
        this.saveNavigationState();

        // Agenda verifica√ß√£o de continuidade
        setTimeout(() => {
            this.ensureMusicContinuity();
        }, 300);

        // Aguarda estabiliza√ß√£o e verifica continuidade musical
        setTimeout(() => {
            this.ensureMusicContinuity();
        }, 1000);
    }

    async ensureMusicContinuity() {
        if (!this.isInitialized) {
            console.log(`‚ö†Ô∏è Inst√¢ncia n√£o inicializada, ignorando verifica√ß√£o`);
            return;
        }

        console.log(`üîç Verificando continuidade musical [${this.instanceId}]`);

        // Verifica se ainda √© a inst√¢ncia ativa
        const globalState = await this.getGlobalState();
        if (!globalState || globalState.instanceId !== this.instanceId) {
            console.log(`‚ùå N√£o √© mais a inst√¢ncia ativa, abortando verifica√ß√£o`);
            return;
        }

        // Verifica se √°udio ainda existe e est√° funcionando
        if (!this.audioElement || !document.documentElement.contains(this.audioElement)) {
            console.log(`‚ö†Ô∏è Elemento de √°udio perdido, recriando...`);
            await this.recreateAudioFromContinuity();
            return;
        }

        // Verifica se m√∫sica deveria estar tocando mas n√£o est√°
        if (this.isPlaying && this.audioElement.paused) {
            console.log(`‚ñ∂Ô∏è M√∫sica deveria estar tocando, retomando...`);
            try {
                await this.audioElement.play();
                console.log(`‚úÖ M√∫sica retomada com sucesso`);
            } catch (error) {
                console.error(`‚ùå Erro ao retomar m√∫sica:`, error);
                await this.recreateAudioFromContinuity();
            }
        }

        // Verifica se controles ainda existem
        if (this.isPlaying && !document.getElementById('shopping-music-controls')) {
            console.log(`üéõÔ∏è Controles perdidos, re-adicionando...`);
            this.addMusicControls(); // ‚ö° Sem await - paralelo
        }

        // Atualiza controles existentes
        this.updateMusicControls();
    }

    async recreateAudioFromContinuity() {
        console.log(`üîÑ Recriando √°udio a partir de continuidade [${this.instanceId}]`);
        
        try {
            // Carrega estado de continuidade
            const continuityData = await this.loadMusicContinuity();
            
            if (continuityData && continuityData.isPlaying) {
                console.log(`üìÇ Continuidade encontrada, recriando √°udio...`);
                
                // Para auto-save atual
                this.stopAutoSaveContinuity();
                
                // Remove √°udio antigo se existir
                if (this.audioElement) {
                    this.removeAudioElement();
                }
                
                // Recria com estado de continuidade
                await this.restoreFromContinuity(continuityData);
                
                console.log(`‚úÖ √Åudio recriado com sucesso a partir de continuidade`);
            } else {
                console.log(`‚ùå Sem continuidade dispon√≠vel para recriar, iniciando nova m√∫sica`);
                await this.startNewMusic();
            }
        } catch (error) {
            console.error(`‚ùå Erro ao recriar √°udio:`, error);
            // Fallback: tenta criar √°udio novo
            try {
                await this.startNewMusic();
            } catch (fallbackError) {
                console.error(`‚ùå Erro no fallback:`, fallbackError);
            }
        }
    }

    async saveNavigationState() {
        if (!this.audioElement) return;
        
        const navigationState = {
            isPlaying: this.isPlaying,
            currentTime: this.audioElement.currentTime,
            volume: this.audioElement.volume,
            instanceId: this.instanceId,
            url: location.href,
            timestamp: Date.now()
        };
        
        await chrome.storage.local.set({ 
            'navigation_music_state': navigationState 
        });
        
        console.log(`üíæ Estado de navega√ß√£o salvo:`, navigationState);
    }

    async restoreAfterNavigation() {
        try {
            const result = await chrome.storage.local.get(['navigation_music_state']);
            const savedState = result.navigation_music_state;
            
            if (savedState && (Date.now() - savedState.timestamp) < 10000) {
                console.log(`üîÑ Restaurando estado ap√≥s navega√ß√£o:`, savedState);
                
                if (this.audioElement && savedState.isPlaying) {
                    this.audioElement.currentTime = savedState.currentTime;
                    this.audioElement.volume = savedState.volume;
                    
                    if (this.audioElement.paused) {
                        await this.audioElement.play();
                        this.isPlaying = true;
                    }
                }
            }
        } catch (error) {
            console.error('Erro ao restaurar ap√≥s navega√ß√£o:', error);
        }
    }



    setupFocusMonitoring() {
        // Monitora quando a janela ganha foco
        window.addEventListener('focus', () => {
            console.log(`üîç Janela ganhou foco, verificando m√∫sica`);
            setTimeout(() => {
                this.ensureMusicContinuity();
            }, 100);
        });
        
        // Monitora visibilidade da p√°gina
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                console.log(`üëÅÔ∏è P√°gina ficou vis√≠vel, verificando m√∫sica`);
                setTimeout(() => {
                    this.ensureMusicContinuity();
                }, 200);
            }
        });
    }

    ensureMusicContinuity() {
        if (!this.isPlaying || !this.audioElement) return;
        
        console.log(`üîç Verificando continuidade da m√∫sica...`);
        
        // Verifica se √°udio ainda existe no DOM
        if (!document.documentElement.contains(this.audioElement)) {
            console.log(`‚ö†Ô∏è Elemento de √°udio foi removido do DOM, recriando...`);
            this.recreateAudioElement();
            return;
        }
        
        // Verifica se √°udio est√° pausado quando deveria estar tocando
        if (this.audioElement.paused && !this.intentionalPause) {
            console.log(`‚ñ∂Ô∏è √Åudio pausado inesperadamente, retomando...`);
            this.audioElement.play().catch(error => {
                console.error('Erro ao retomar √°udio:', error);
                // Se falhar, tenta recriar
                this.recreateAudioElement();
            });
        }
        
        // Verifica se controles ainda est√£o vis√≠veis
        if (!document.getElementById('shopping-music-controls')) {
            console.log(`üéõÔ∏è Controles n√£o encontrados, re-adicionando...`);
            this.controlsAdded = false;
            this.addMusicControls();
        }
        
        // Atualiza estado global
        this.updateGlobalStateQuietly();
    }

    async recreateAudioElement() {
        console.log(`üîÑ Recriando elemento de √°udio [${this.instanceId}]...`);
        
        const currentTime = this.audioElement ? this.audioElement.currentTime : 0;
        const currentVolume = this.audioElement ? this.audioElement.volume : 0.3;
        
        // Remove elemento antigo se existir
        if (this.audioElement) {
            this.removeAudioElement();
        }
        
        // Recria com estado preservado
        await this.createAudioPlayer({
            currentTime: currentTime,
            volume: currentVolume
        });
    }

    async updateGlobalStateQuietly() {
        try {
            const globalState = await this.getGlobalState();
            if (globalState && globalState.instanceId === this.instanceId) {
                await this.setGlobalState({
                    ...globalState,
                    isPlaying: this.isPlaying,
                    timestamp: Date.now()
                });
            }
        } catch (error) {
            console.log('Erro ao atualizar estado global:', error);
        }
    }

    interceptHistoryAPI() {
        // Intercepta pushState
        const originalPushState = history.pushState;
        history.pushState = (...args) => {
            console.log(`üìå pushState interceptado: ${args[2] || 'sem URL'}`);
            this.saveNavigationState();
            const result = originalPushState.apply(history, args);
            setTimeout(() => {
                this.handleSPANavigation();
            }, 300);
            return result;
        };

        // Intercepta replaceState  
        const originalReplaceState = history.replaceState;
        history.replaceState = (...args) => {
            console.log(`üîÑ replaceState interceptado: ${args[2] || 'sem URL'}`);
            this.saveNavigationState();
            const result = originalReplaceState.apply(history, args);
            setTimeout(() => {
                this.handleSPANavigation();
            }, 300);
            return result;
        };
    }

    setupTimeUpdateListener() {
        if (!this.audioElement) return;
        
        // Remove listeners existentes para evitar duplicatas
        this.audioElement.removeEventListener('timeupdate', this.timeUpdateHandler);
        
        // Cria novo handler
        this.timeUpdateHandler = () => {
            if (this.isPlaying && this.audioElement && this.audioElement.currentTime % 5 < 0.1) {
                // Atualiza background a cada 5 segundos
                this.notifyBackgroundStateChange({
                    currentTime: this.audioElement.currentTime
                });
            }
        };
        
        this.audioElement.addEventListener('timeupdate', this.timeUpdateHandler);
        
        // Adiciona listener para detectar pausas n√£o intencionais
        this.audioElement.addEventListener('pause', () => {
            if (this.isPlaying && !this.intentionalPause) {
                console.log(`‚ö†Ô∏è Pausa n√£o intencional detectada, retomando em 100ms`);
                setTimeout(() => {
                    if (this.audioElement && this.isPlaying) {
                        this.audioElement.play().catch(console.error);
                    }
                }, 100);
            }
        });
        
        // Adiciona listener para detectar final inesperado
        this.audioElement.addEventListener('ended', () => {
            if (this.audioElement.loop && this.isPlaying) {
                console.log(`üîÑ √Åudio terminou inesperadamente, reiniciando`);
                this.audioElement.play().catch(console.error);
            }
        });
    }

    showDiscretePlayNotification() {
        // Remove notifica√ß√£o existente se houver
        const existingNotification = document.getElementById('music-play-notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        // Notifica√ß√£o pequena e discreta no canto
        const notification = document.createElement('div');
        notification.id = 'music-play-notification';
        notification.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 999999;
            background: rgba(255, 107, 107, 0.95);
            color: white;
            padding: 12px 18px;
            border-radius: 25px;
            font-family: Arial, sans-serif;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            user-select: none;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            display: flex;
            align-items: center;
            gap: 8px;
            max-width: 280px;
        `;

        notification.innerHTML = `
            <span style="font-size: 16px;">üéµ</span>
            <span>Clique para ativar m√∫sica de compras</span>
            <span style="font-size: 12px; opacity: 0.8; margin-left: 5px;">‚úï</span>
        `;

        document.body.appendChild(notification);

        // Auto-remove ap√≥s 8 segundos
        const autoRemove = setTimeout(() => {
            if (notification.parentNode) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateY(10px)';
                setTimeout(() => notification.remove(), 300);
            }
        }, 8000);

        // Clique para ativar m√∫sica
        notification.addEventListener('click', async () => {
            try {
                await this.audioElement.play();
                this.isPlaying = true;
                notification.remove();
                clearTimeout(autoRemove);
                
                // Atualiza estado global
                const globalState = await this.getGlobalState();
                await this.setGlobalState({
                    ...globalState,
                    isPlaying: true
                });
                
                // Notifica background
                await this.sendToBackground({
                    action: 'musicStarted',
                    domain: this.currentDomain,
                    currentTime: this.audioElement.currentTime,
                    volume: this.audioElement.volume
                });
                
                console.log(`üéµ M√∫sica ativada pelo usu√°rio [${this.instanceId}]!`);
            } catch (error) {
                console.error('Erro ao tocar m√∫sica:', error);
            }
        });

        // Anima√ß√£o de entrada
        setTimeout(() => {
            notification.style.transform = 'translateY(-5px)';
        }, 100);
    }

    async addMusicControls() {
        // Evita adicionar controles duplicados
        if (this.controlsAdded || document.getElementById('shopping-music-controls')) {
            return;
        }

        // ‚ö° OTIMIZA√á√ÉO: Controles em paralelo - n√£o bloqueia m√∫sica
        this.addControlsAsync();
    }

    async addControlsAsync() {
        try {
            // Aguarda DOM estar pronto (em paralelo, n√£o bloqueia m√∫sica)
            await this.ensureDOMReady();
            
            // Verifica novamente ap√≥s aguardar DOM (pode ter sido criado por outra inst√¢ncia)
            if (document.getElementById('shopping-music-controls')) {
                return;
            }

        // Cria um player expandido com controles avan√ßados
        const controlsContainer = document.createElement('div');
        controlsContainer.id = 'shopping-music-controls';
        controlsContainer.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 999999;
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            padding: 12px 16px;
            border-radius: 25px;
            font-family: Arial, sans-serif;
            font-size: 12px;
            font-weight: bold;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            cursor: pointer;
            user-select: none;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            min-width: 200px;
        `;

        // √çcone de m√∫sica
        const musicIcon = document.createElement('span');
        musicIcon.textContent = this.randomMode ? 'üîÄ' : 'üéµ';
        musicIcon.style.fontSize = '16px';
        musicIcon.id = 'music-mode-icon';

        // Nome da m√∫sica atual
        const trackName = document.createElement('span');
        const currentTrack = this.getCurrentTrack();
        trackName.textContent = currentTrack.name;
        trackName.id = 'track-name';
        trackName.style.cssText = `
            flex: 1;
            font-size: 11px;
            opacity: 0.9;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        `;

        // Controles de navega√ß√£o
        const prevButton = document.createElement('button');
        prevButton.textContent = '‚èÆÔ∏è';
        prevButton.style.cssText = `
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            padding: 2px;
            opacity: 0.8;
        `;
        prevButton.title = 'M√∫sica anterior';

        const toggleButton = document.createElement('button');
        toggleButton.textContent = this.isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è';
        toggleButton.style.cssText = `
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 14px;
            padding: 2px;
        `;
        toggleButton.title = 'Play/Pause';
        toggleButton.id = 'play-pause-btn';

        const nextButton = document.createElement('button');
        nextButton.textContent = '‚è≠Ô∏è';
        nextButton.style.cssText = `
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            font-size: 12px;
            padding: 2px;
            opacity: 0.8;
        `;
        nextButton.title = 'Pr√≥xima m√∫sica';

        // Monta os controles
        controlsContainer.appendChild(musicIcon);
        controlsContainer.appendChild(trackName);
        controlsContainer.appendChild(prevButton);
        controlsContainer.appendChild(toggleButton);
        controlsContainer.appendChild(nextButton);

        // Eventos
        prevButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this.previousTrack();
        });

        toggleButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleMusic();
        });

        nextButton.addEventListener('click', (e) => {
            e.stopPropagation();
            this.nextTrack();
        });

        // Clique no √≠cone alterna modo aleat√≥rio
        musicIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            this.toggleRandomMode();
        });

        // Clique no container mostra info
        controlsContainer.addEventListener('click', (e) => {
            if (e.target === controlsContainer || e.target === trackName) {
                this.showMusicInfo();
            }
        });

        // Adiciona ao DOM
        document.body.appendChild(controlsContainer);
        this.controlsAdded = true;

        // Auto-hide ap√≥s alguns segundos
        setTimeout(() => {
            if (controlsContainer.parentNode) {
                controlsContainer.style.opacity = '0.7';
                controlsContainer.style.transform = 'translateX(10px)';
            }
        }, 5000);

        // Mostra novamente ao passar o mouse
        controlsContainer.addEventListener('mouseenter', () => {
            controlsContainer.style.opacity = '1';
            controlsContainer.style.transform = 'translateX(0px)';
        });
        
        } catch (error) {
            console.error(`‚ùå Erro ao adicionar controles [${this.instanceId}]:`, error);
        }
    }

    updateMusicControls() {
        const trackName = document.getElementById('track-name');
        const modeIcon = document.getElementById('music-mode-icon');
        const playButton = document.getElementById('play-pause-btn');
        
        if (trackName) {
            const currentTrack = this.getCurrentTrack();
            trackName.textContent = currentTrack.name;
        }
        
        if (modeIcon) {
            modeIcon.textContent = this.randomMode ? 'üîÄ' : 'üéµ';
        }
        
        if (playButton) {
            playButton.textContent = this.isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è';
        }
    }

    async toggleMusic() {
        if (!this.audioElement) return;

        if (this.isPlaying) {
            // üîÑ Salva continuidade antes de pausar
            await this.saveMusicContinuity();
            
            // Marca como pausa intencional
            this.intentionalPause = true;
            this.audioElement.pause();
            this.isPlaying = false;
            
            // Para auto-save quando pausado
            this.stopAutoSaveContinuity();
            
            const button = document.querySelector('#shopping-music-controls button');
            if (button) button.textContent = '‚ñ∂Ô∏è';
            
            // Atualiza estado global
            const globalState = await this.getGlobalState();
            await this.setGlobalState({
                ...globalState,
                isPlaying: false
            });
            
            // Notifica background que parou
            this.sendToBackground({ action: 'musicStopped' });
            
            console.log(`‚è∏Ô∏è M√∫sica pausada intencionalmente [${this.instanceId}]`);
        } else {
            this.intentionalPause = false;
            
            this.audioElement.play().then(async () => {
                this.isPlaying = true;
                
                // üîÑ Reinicia auto-save quando retoma
                this.startAutoSaveContinuity();
                
                const button = document.querySelector('#shopping-music-controls button');
                if (button) button.textContent = '‚è∏Ô∏è';
                
                // Atualiza estado global
                const globalState = await this.getGlobalState();
                await this.setGlobalState({
                    ...globalState,
                    isPlaying: true
                });
                
                // Notifica background que come√ßou
                this.sendToBackground({
                    action: 'musicStarted',
                    domain: this.currentDomain,
                    currentTime: this.audioElement.currentTime,
                    volume: this.audioElement.volume
                });
                
                console.log(`‚ñ∂Ô∏è M√∫sica retomada [${this.instanceId}]`);
            }).catch(error => {
                console.error('Erro ao reproduzir m√∫sica:', error);
            });
        }
    }

    showMusicInfo() {
        const currentTrack = this.getCurrentTrack();
        const trackList = this.musicTracks.map((track, index) => 
            `${index === this.currentTrackIndex ? '‚ñ∂Ô∏è' : 'üéµ'} ${track.name}`
        ).join('\n');

        alert(`üéµ Shopping Music Player

M√∫sica atual: ${currentTrack.name}
Modo: ${this.randomMode ? 'Aleat√≥rio üîÄ' : 'Sequencial üéµ'}
Status: ${this.isPlaying ? 'Tocando ‚ñ∂Ô∏è' : 'Pausado ‚è∏Ô∏è'}

M√∫sicas dispon√≠veis:
${trackList}

Site atual: ${window.location.hostname}
Inst√¢ncia: ${this.instanceId}

üí° Controles:
‚Ä¢ Clique no √≠cone üéµ/üîÄ para alternar modo aleat√≥rio
‚Ä¢ Use ‚èÆÔ∏è e ‚è≠Ô∏è para navegar entre m√∫sicas
‚Ä¢ Configure mais op√ß√µes no popup da extens√£o`);
    }

    async getStoredSetting(key, defaultValue) {
        return new Promise((resolve) => {
            chrome.storage.sync.get([key], (result) => {
                resolve(result[key] !== undefined ? result[key] : defaultValue);
            });
        });
    }

    async setStoredSetting(key, value) {
        return new Promise((resolve) => {
            chrome.storage.sync.set({ [key]: value }, resolve);
        });
    }

    async stopMusic() {
        if (this.audioElement && this.isPlaying) {
            console.log(`üõë Parando m√∫sica [${this.instanceId}]`);
            this.audioElement.pause();
            this.isPlaying = false;
            
            // Atualiza estado global
            const globalState = await this.getGlobalState();
            if (globalState && globalState.instanceId === this.instanceId) {
                await this.setGlobalState({
                    ...globalState,
                    isPlaying: false
                });
            }
            
            // Remove controles visuais
            const controls = document.getElementById('shopping-music-controls');
            if (controls) {
                controls.remove();
                this.controlsAdded = false;
            }
            
            console.log(`üéµ M√∫sica parada [${this.instanceId}]`);
        }
    }

    async destroy() {
        // Destr√≥i completamente a inst√¢ncia
        console.log(`üóëÔ∏è Destruindo inst√¢ncia [${this.instanceId}]`);
        
        // üîÑ Salva continuidade antes de destruir (se estava tocando)
        if (this.isPlaying && this.audioElement) {
            await this.saveMusicContinuity();
        }
        
        this.stopMusic();
        
        // Para auto-save de continuidade
        this.stopAutoSaveContinuity();
        
        if (this.monitorInterval) {
            clearInterval(this.monitorInterval);
            this.monitorInterval = null;
        }

        // üõí Limpa recursos de navega√ß√£o Amazon
        if (this.navigationCleanup) {
            this.navigationCleanup();
            this.navigationCleanup = null;
        }
        
        // Remove da inst√¢ncia global se for esta
        const globalState = await this.getGlobalState();
        if (globalState && globalState.instanceId === this.instanceId) {
            await this.clearGlobalState();
        }
        
        this.removeAudioElement();
        this.isInitialized = false;
    }
}

// Fun√ß√£o para verificar se √© site de compras
function isShoppingSite() {
    const shoppingSites = [
        'mercadolivre.com.br', 'mercadolibre.com', 'amazon.com', 'amazon.com.br',
        'ebay.com', 'aliexpress.com', 'shopee.com.br', 'americanas.com.br',
        'submarino.com.br', 'casasbahia.com.br', 'magazineluiza.com.br'
    ];

    const currentSite = window.location.hostname.toLowerCase();
    return shoppingSites.some(site => 
        currentSite.includes(site) || currentSite.endsWith(site)
    );
}

// Inicializa√ß√£o principal com suporte aprimorado para SPAs
if (isShoppingSite()) {
    const currentSite = window.location.hostname;
    console.log(`üõí Site de compras detectado: ${currentSite}`);
    
    // Fun√ß√£o robusta de inicializa√ß√£o
    const initializePlayer = () => {
        // Verifica se j√° existe player ativo e funcional
        if (window.shoppingMusicPlayer && 
            window.shoppingMusicPlayer.isInitialized && 
            window.shoppingMusicPlayer.audioElement &&
            document.documentElement.contains(window.shoppingMusicPlayer.audioElement)) {
            console.log(`‚ö†Ô∏è Player j√° existe e funcional, verificando continuidade`);
            window.shoppingMusicPlayer.ensureMusicContinuity();
            return;
        }
        
        // Remove player antigo se existir mas n√£o funcional
        if (window.shoppingMusicPlayer) {
            console.log(`üßπ Removendo player antigo n√£o funcional`);
            try {
                window.shoppingMusicPlayer.destroy();
            } catch (e) {
                console.log('Erro ao destruir player antigo:', e);
            }
        }
        
        // Inicializa novo player
        console.log(`üÜï Criando novo Shopping Music Player`);
        const player = new ShoppingMusicPlayer();
        
        // Mant√©m refer√™ncia global para debug e limpeza
        window.shoppingMusicPlayer = player;
        
        // Cleanup quando sair da p√°gina
        window.addEventListener('beforeunload', (e) => {
            if (player && player.isInitialized) {
                // üîÑ Salva continuidade musical antes de sair
                if (player.isPlaying && player.audioElement) {
                    player.saveMusicContinuity();
                }
                
                // Salva estado antes de sair
                player.saveNavigationState();
                console.log(`üö™ P√°gina sendo fechada, continuidade e estado salvos`);
            }
        });
        
        // Gerencia visibilidade da p√°gina (mudan√ßa de aba)
        document.addEventListener('visibilitychange', () => {
            if (document.hidden && player && player.isInitialized) {
                // üîÑ Salva continuidade quando oculta aba
                if (player.isPlaying && player.audioElement) {
                    player.saveMusicContinuity();
                }
                
                // Salva estado quando oculta
                player.saveNavigationState();
                console.log(`üëÅÔ∏è P√°gina oculta, continuidade e estado salvos [${player.instanceId}]`);
            } else if (!document.hidden && player && player.isInitialized) {
                // Restaura quando volta
                setTimeout(() => {
                    player.restoreAfterNavigation();
                    player.ensureMusicContinuity();
                }, 200);
                console.log(`üëÅÔ∏è P√°gina vis√≠vel, restaurando estado [${player.instanceId}]`);
            }
        });
        
        // üåê Monitoramento gen√©rico para qualquer SPA
        console.log(`üåê Configurando monitoramento gen√©rico de SPA`);
        
        let currentUrl = location.href;
        
        const genericMonitor = setInterval(() => {
            // Verifica mudan√ßa de URL apenas se m√∫sica est√° tocando
            if (location.href !== currentUrl && player && player.isInitialized && player.isPlaying) {
                currentUrl = location.href;
                console.log(`üîÑ URL mudou para: ${currentUrl}`);
                
                if (isShoppingSite()) {
                    setTimeout(() => {
                        player.ensureMusicContinuity();
                    }, 1000);
                } else {
                    console.log(`üè™ Saiu do site de compras`);
                    player.intentionalPause = true;
                    if (player.audioElement) {
                        player.audioElement.pause();
                    }
                }
            }
        }, 1000); // Verifica a cada segundo
    };
    
    // ‚ö° OTIMIZA√á√ÉO: Estrat√©gia de inicializa√ß√£o IMEDIATA
    const tryInitialize = () => {
        console.log(`üöÄ Inicializa√ß√£o IMEDIATA - n√£o espera DOM [${Date.now()}]`);
        initializePlayer();
        
        // Backup: tenta novamente ap√≥s 1 segundo se n√£o funcionou
        setTimeout(() => {
            if (!window.shoppingMusicPlayer || !window.shoppingMusicPlayer.isInitialized) {
                console.log(`üîÑ Backup: tentativa ap√≥s 1 segundo`);
                initializePlayer();
            }
        }, 1000);
        
        // √öltimo backup: tenta ap√≥s 3 segundos
        setTimeout(() => {
            if (!window.shoppingMusicPlayer || !window.shoppingMusicPlayer.isInitialized) {
                console.log(`üîÑ √öltimo backup: tentativa ap√≥s 3 segundos`);
                initializePlayer();
            }
        }, 3000);
    };
    
    // ‚ö° EXECU√á√ÉO IMEDIATA - N√£o espera nada!
    console.log(`üöÄ INICIANDO IMEDIATAMENTE - URL j√° dispon√≠vel: ${window.location.href}`);
    tryInitialize();
    
    // Observer de mudan√ßas no body (s√≥ quando DOM estiver pronto)
    const setupBodyObserver = () => {
        if (document.body) {
            console.log(`üëÅÔ∏è Configurando observer do body`);
            const bodyObserver = new MutationObserver((mutations) => {
                let significantChange = false;
                mutations.forEach(mutation => {
                    if (mutation.addedNodes.length > 5 || 
                        mutation.removedNodes.length > 5) {
                        significantChange = true;
                    }
                });
                
                if (significantChange) {
                    console.log(`üîÑ Mudan√ßa significativa no DOM detectada`);
                    setTimeout(() => {
                        if (window.shoppingMusicPlayer && window.shoppingMusicPlayer.isInitialized) {
                            window.shoppingMusicPlayer.ensureMusicContinuity();
                        } else {
                            initializePlayer();
                        }
                    }, 1000);
                }
            });
            
            bodyObserver.observe(document.body, {
                childList: true,
                subtree: true
            });
        } else {
            // Body ainda n√£o existe, tenta novamente
            setTimeout(setupBodyObserver, 100);
        }
    };
    
    // Configura observer quando poss√≠vel
    setupBodyObserver();
    
} else {
    console.log(`üè™ Site n√£o √© de compras: ${window.location.hostname}`);
}